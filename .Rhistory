data_with_pca_glm = glm(class ~., data = data_with_pca_treino, family=binomial(link=logit))
data_with_pca_glm = glm(formula = class ~ . , data = data_with_pca_treino, family=binomial(link=logit))
print(data_with_pca_treino)
print(data_with_pca_treino)
data_origin_treino
data_with_pca_treino = data_with_pca[c(1:200), 1:ncol(data_with_pca)]
data_with_pca_treino["class"] = class_treino
data_with_pca_treino["class"] = class_treino
data_origin_glm = glm(formula = class ~ ., data = data_origin,family=binomial(link=logit))
data_origin_glm = glm(formula = class ~ ., data = data_origin_treino,family=binomial(link=logit))
data_origin_glm
pred_origin_glm<-predict(data_origin_glm,newdata=data.frame(data_origin_teste),type="response", se.fit=T)
pred_origin_glm
data_origin_lda = lda(formula = class ~ .,data_origin_treino)
data_origin_lda = lda(formula = class ~ .,data_origin_treino)
help(pca)
??pca
data_origin_lda = lda(formula = class ~ .,data_origin_treino)
data_with_pca_glm = glm(formula = class ~ . , data = data_with_pca_treino, family=binomial(link=logit))
data_with_pca_glm = glm(formula = class ~ . , data = ata.frame(data_with_pca_treino), family=binomial(link=logit))
data_with_pca_glm = glm(formula = class ~ . , data = data.frame(data_with_pca_treino), family=binomial(link=logit))
data.frame(data_with_pca_treino)
data_with_pca_treino
data_with_pca_treino = data_with_pca[c(1:200), 1:ncol(data_with_pca)]
data_with_pca_treino["class"] = class_treino
data_with_pca_treino = data_with_pca[c(1:200), 1:ncol(data_with_pca)]
data_with_pca_treino = data.frame(data_with_pca_treino)
data_with_pca_treino
data_with_pca_treino["class"] = data.frame(class_treino)
data_with_pca_treino
data_with_pca_treino = data_with_pca[c(1:200), 1:ncol(data_with_pca)]
data_with_pca_treino = data.frame(data_with_pca_treino)
data_with_pca_treino["class"] = data.frame(class_treino)
data_with_pca_teste = data_with_pca[c(201:number_row), 1: ncol(data_with_pca)]
data_with_pca_teste = data.frame(data_with_pca_teste)
data_with_pca_teste["class"] = data.frame(class_teste)
data_with_pca_glm = glm(formula = class ~ . , data = data.frame(data_with_pca_treino), family=binomial(link=logit))
data_with_pca_glm
pred_with_pca_glm<-predict(data_with_pca_glm,newdata=data.frame(data_with_pca_teste),type="response", se.fit=T)
pred_with_pca_glm
help(predict)
data_with_pca_lda = lda( class ~ .,data_with_pca_treino)
print(data_with_pca_lda)
data_origin_glm = glm(formula = class ~ ., data = data_origin_treino,family=binomial(link=logit))
data_origin_glm = glm(formula = class ~ ., data = data.frame(data_origin_treino),family=binomial(link=logit))
pred_origin_glm<-predict(data_origin_glm,newdata=data.frame(data_origin_teste),type="response", se.fit=T)
data_origin_lda = lda(class ~ .,data_origin_treino)
pred_origin_lda <- predict(data_origin_lda,data_origin_teste)
print(data_origin_glm)
pred_origin_lda <- predict(data_origin_lda,data_origin_teste)
accuracy(class_treino,data_with_pca_glm,threshold=0.5)
accuracy(class_treino,data_origin_glm,threshold=0.5)
data_with_pca_glm
accuracy(class_treino,data_origin_glm,threshold=0.5)
data_origin_glm
data_with_pca_glm
accuracy(class_treino,data_origin_glm,threshold=0.5)
# leitura do arquivo
all_data = read.csv("C:\\Users\\natha\\Desktop\\Unicamp Primeiro Semestre\\Aprendizado\\data1.csv")
# numero de colunas total
number_column = ncol(all_data)
# numero de linhas total
number_row = nrow(all_data)
# selecionando ultima coluna que contem classe
class = all_data[number_column]
# dados originais sem ultima coluna
data_origin = all_data[1: number_column - 1]
# usando a funcao de pca
pca = prcomp(data_origin, scale. = T)
# fazendo a variancia para ver a quantidade de dimensao selecionada
sum_pca = cumsum(pca$sdev^2)/sum(pca$sdev^2)
# porcentagem de variancia que deve ser aceita
variance_ini = 0.8
# verifica qual eh a posicao desta variancia
dimensao = 0;
for (i in 1:(number_column - 1)) {
if (sum_pca[i] >= variance_ini){
dimensao = i
break
}
}
# gerando os dados transformados com as dimensoes da variancia
data_with_pca =pca$x[,1:dimensao]
# numbero de dimensao
total_dimensions = ncol(data_with_pca)
print(total_dimensions)
######### testes ###########
# classes
class_treino = class[c(1:200),1]
class_teste = class[c(201:number_row),1]
# Selecionando treino e teste com dados originais
data_origin_treino = data_origin[c(1:200), 1:number_column - 1]
data_origin_treino["class"] = data.frame(class_treino)
data_origin_teste = data_origin[c(201:number_row), 1:number_column - 1]
data_origin_teste["class"] = data.frame(class_teste)
# Selecionando treino com dados com PCA
data_with_pca_treino = data_with_pca[c(1:200), 1:ncol(data_with_pca)]
data_with_pca_treino = data.frame(data_with_pca_treino)
data_with_pca_treino["class"] = data.frame(class_treino)
data_with_pca_teste = data_with_pca[c(201:number_row), 1: ncol(data_with_pca)]
data_with_pca_teste = data.frame(data_with_pca_teste)
data_with_pca_teste["class"] = data.frame(class_teste)
library(MASS)
library(SDMTools)
print(data_origin_treino)
print(data_origin_teste)
print(data_with_pca_treino)
print(data_with_pca_teste)
data_with_pca_glm = glm(formula = class ~ . , data = data.frame(data_with_pca_treino), family=binomial(link=logit))
data_with_pca_glm
help(glm)
anova(glm
)
anova(data_origin_glm)
summary(data_origin_glm)
data_with_pca_lda
pred_with_pca_lda
### Com PCA ###
# Regressao logistica
data_with_pca_glm = glm(formula = class ~ . , data = data.frame(data_with_pca_treino), family=binomial(link=logit))
pred_with_pca_glm<-predict(data_with_pca_glm,newdata=data.frame(data_with_pca_teste),type="response", se.fit=T)
#LDA
data_with_pca_lda = lda( class ~ .,data_with_pca_treino)
pred_with_pca_lda <- predict(data_origin_lda,data_origin_teste)
pred_with_pca_lda
data_with_pca_lda
data_origin_lda
summary(data_origin_lda)
anova(data_origin_lda)
pred_origin_lda
str(pred_origin_lda)
data_origin_glm
help(glm)
print(data_origin_glm)
accuracy(class_treino,data_with_pca_glm,threshold=0.5)
data_origin_glm
class_treino
confusion(class_treino, data_with_pca_glm$class)
library(MASS)
confusion(class_treino, data_with_pca_glm$class)
confusionMAtrix(class_treino, data_with_pca_glm$class)
library(caret)
install.packages("caret")
library(caret)
confusionMAtrix(class_treino, data_with_pca_glm$class)
confusionMatrix(class_treino, data_with_pca_glm$class)
confusionMatrix(class_treino, data_with_pca_glm)
data_with_pca_glm
confusionMatrix(data_with_pca_glm)
table(predict(data_with_pca_lda, type="class")$class, class_treino)
table(predict(data_with_pca_lda, type="class")$class, class_treino)
table(predict(data_origin_glm, type="class")$class, class_treino)
table(predict(data_origin_glm, type="class")$class, class_treino)
table(predict(data_origin_glm, type="class")$class, class_treino)
table(predict(data_origin_glm, type="response")$class, class_treino)
table(predict(data_origin_glm, type="response")$response, class_treino)
table(predict(data_origin_glm, type="link")$class, class_treino)
table(predict(data_origin_glm, type="link")$link, class_treino)
table(as.logical(class_treino), data_origin_glm)
data_origin_glm
prediction <- predict(data_origin_glm, type='response') > cutoff
table(predict(data_origin_glm, type="response")$class,class_treino)
data_origin_glm
table(predict(pred_with_pca_lda, type="class")$class, class_teste)
table(predict(pred_origin_lda, type="class")$class, class_teste)
table(predict(data_origin_teste, type="class")$class, class_teste)
table(predict(data_origin_teste, type="class")$class, class_teste)
table(pred_origin_lda$class, class_teste)
table(pred_with_pca_lda$class, class_teste)
data_with_pca_lda = lda( class ~ .,data_with_pca_treino)
pred_with_pca_lda <- predict(data_with_pca_lda,data_origin_teste)
# leitura do arquivo
all_data = read.csv("C:\\Users\\natha\\Desktop\\Unicamp Primeiro Semestre\\Aprendizado\\data1.csv")
# numero de colunas total
number_column = ncol(all_data)
# numero de linhas total
number_row = nrow(all_data)
# selecionando ultima coluna que contem classe
class = all_data[number_column]
# dados originais sem ultima coluna
data_origin = all_data[1: number_column - 1]
# usando a funcao de pca
pca = prcomp(data_origin, scale. = T)
# fazendo a variancia para ver a quantidade de dimensao selecionada
sum_pca = cumsum(pca$sdev^2)/sum(pca$sdev^2)
# porcentagem de variancia que deve ser aceita
variance_ini = 0.8
# verifica qual eh a posicao desta variancia
dimensao = 0;
for (i in 1:(number_column - 1)) {
if (sum_pca[i] >= variance_ini){
dimensao = i
break
}
}
# gerando os dados transformados com as dimensoes da variancia
data_with_pca =pca$x[,1:dimensao]
# numbero de dimensao
total_dimensions = ncol(data_with_pca)
print(total_dimensions)
######### testes ###########
# classes
class_treino = class[c(1:200),1]
class_teste = class[c(201:number_row),1]
# Selecionando treino e teste com dados originais
data_origin_treino = data_origin[c(1:200), 1:number_column - 1]
data_origin_treino["class"] = data.frame(class_treino)
data_origin_teste = data_origin[c(201:number_row), 1:number_column - 1]
data_origin_teste["class"] = data.frame(class_teste)
# Selecionando treino com dados com PCA
data_with_pca_treino = data_with_pca[c(1:200), 1:ncol(data_with_pca)]
data_with_pca_treino = data.frame(data_with_pca_treino)
data_with_pca_treino["class"] = data.frame(class_treino)
data_with_pca_teste = data_with_pca[c(201:number_row), 1: ncol(data_with_pca)]
data_with_pca_teste = data.frame(data_with_pca_teste)
data_with_pca_teste["class"] = data.frame(class_teste)
library(MASS)
library(SDMTools)
library(caret)
### Com PCA ###
# Regressao logistica
data_with_pca_glm = glm(formula = class ~ . , data = data.frame(data_with_pca_treino), family=binomial(link=logit))
pred_with_pca_glm<-predict(data_with_pca_glm,newdata=data.frame(data_with_pca_teste),type="response", se.fit=T)
#LDA
data_with_pca_lda = lda( class ~ .,data_with_pca_treino)
pred_with_pca_lda <- predict(data_with_pca_lda,data_with_pca_teste)
### Sem PCA ###
# Regressao logistica
data_origin_glm = glm(formula = class ~ ., data = data.frame(data_origin_treino),family=binomial(link=logit))
pred_origin_glm<-predict(data_origin_glm,newdata=data.frame(data_origin_teste),type="response", se.fit=T)
#LDA
data_origin_lda = lda(class ~ .,data_origin_treino)
pred_origin_lda <- predict(data_origin_lda,data_origin_teste)
table(pred_with_pca_lda$class, class_teste)
#accuracy(class_teste,pred_with_pca_lda,threshold=0.5)
# Sem PCA
table(pred_origin_lda$class, class_teste)
table(predict(data_with_pca_glm, type="class")$class, class_treino)
table(predict(data_with_pca_glm, type="response"), class_treino)
table(pred_with_pca_glm$class, class_treino)
pred_with_pca_glm
str(pred_with_pca_glm)
pred_with_pca_glm<-predict(data_with_pca_glm,newdata=data.frame(data_with_pca_teste),type="response")
print(pred_with_pca_glm)
pred_with_pca_glm<-predict(data_with_pca_glm,newdata=data.frame(data_with_pca_teste),type="link")
print(pred_with_pca_glm)
str(pred_with_pca_glm)
print(pred_with_pca_lda)
str(pred_with_pca_lda)
table(class_treino, data_with_pca_glm > 0.5)
table(class_treino, pred_with_pca_glm > 0.5)
table(class_teste, pred_with_pca_glm > 0.5)
table(class_teste, data_origin_glm > 0.5)
table(class_teste, pred_origin_glm > 0.5)
table(class_teste, pred_origin_glm > 0.5)
data_origin_glm = glm(formula = class ~ ., data = data.frame(data_origin_treino),family=binomial(link=logit))
pred_origin_glm<-predict(data_origin_glm,newdata=data.frame(data_origin_teste),type="link")
table(class_teste, pred_origin_glm > 0.5)
pred_with_pca_glm<-predict(data_with_pca_glm,newdata=data.frame(data_with_pca_teste),type="response")
table(class_teste, pred_with_pca_glm > 0.5)
data_with_pca_glm = glm(formula = class ~ . , data = data.frame(data_with_pca_treino), family=binomial(link=logit))
pred_with_pca_glm<-predict(data_with_pca_glm,newdata=data.frame(data_with_pca_teste),type="response")
table(class_teste, pred_with_pca_glm > 0.5)
# Sem PCA
table(class_teste, pred_origin_glm > 0.5)
pred_origin_glm<-predict(data_origin_glm,newdata=data.frame(data_origin_teste),type="response")
table(class_teste, pred_origin_glm > 0.5)
### Com PCA ###
# Regressao logistica
data_with_pca_glm = glm(formula = class ~ . , data = data.frame(data_with_pca_treino), family=binomial(link=logit))
pred_with_pca_glm<-predict(data_with_pca_glm,newdata=data.frame(data_with_pca_teste),type="response")
#LDA
data_with_pca_lda = lda( class ~ .,data_with_pca_treino)
pred_with_pca_lda <- predict(data_with_pca_lda,data_with_pca_teste)
### Sem PCA ###
# Regressao logistica
data_origin_glm = glm(formula = class ~ ., data = data.frame(data_origin_treino),family=binomial(link=logit))
pred_origin_glm<-predict(data_origin_glm,newdata=data.frame(data_origin_teste),type="response")
#LDA
data_origin_lda = lda(class ~ .,data_origin_treino)
pred_origin_lda <- predict(data_origin_lda,data_origin_teste)
# Calculo de acuracia
# Questao  numero 2 -Treine uma regressao logistica no conjunto de treino dos dados originais e nos dados transformados.
# Qual a taxa de acerto no conjunto de teste nas 2 condicoes (sem e com PCA)
# Com PCA
table(class_teste, pred_with_pca_glm > 0.5)
# Sem PCA
table(class_teste, pred_origin_glm > 0.5)
#accuracy(class_treino,data_origin_glm,threshold=0.5)
# Questao numero 3 - Treine o LDA nos conjuntos de treino com e sem PCA e teste nos respectivos conjuntos de testes. Qual acuracia de cada um?
# Com PCA
table(pred_with_pca_lda$class, class_teste)
#accuracy(class_teste,pred_with_pca_lda,threshold=0.5)
# Sem PCA
table(pred_origin_lda$class, class_teste)
#accuracy(class_teste,pred_origin_lda,threshold=0.5)
glm_confusion_with_pca = table(class_teste, pred_with_pca_glm > 0.5)
glm_confusion_with_pca
glm_confusion_with_pca[1]
glm_confusion_with_pca[2]
glm_confusion_with_pca[3]
glm_confusion_with_pca[4]
glm_acuracia_with_pca =(glm_confusion_with_pca[1] + glm_confusion_with_pca[4]/(glm_confusion_with_pca[1] + glm_confusion_with_pca[2] + glm_confusion_with_pca[3] + glm_confusion_with_pca[4]) )
glm_acuracia_with_pca
glm_confusion_with_pca = table(class_teste, pred_with_pca_glm > 0.5)
glm_acuracia_with_pca =(glm_confusion_with_pca[1] + glm_confusion_with_pca[4]/(glm_confusion_with_pca[1] + glm_confusion_with_pca[2] + glm_confusion_with_pca[3] + glm_confusion_with_pca[4]) )
glm_acuracia_with_pca
glm_acuracia_with_pca =(glm_confusion_with_pca[1] + glm_confusion_with_pca[4])/(glm_confusion_with_pca[1] + glm_confusion_with_pca[2] + glm_confusion_with_pca[3] + glm_confusion_with_pca[4])
glm_acuracia_with_pca
print(glm_acuracia_with_pca)
print("Acuracia com pca glm:")
print(glm_acuracia_with_pca)
glm_confusion_origin = table(class_teste, pred_origin_glm > 0.5)
glm_acuracia_origin =(glm_confusion_origin[1] + glm_confusion_origin[4])/(glm_confusion_origin[1] + glm_confusion_origin[2] + glm_confusion_origin[3] + glm_confusion_origin[4])
glm_acuracia_origin
print(glm_acuracia_with_pca)
print(glm_acuracia_with_pca)
glm_confusion_origin = table(class_teste, pred_origin_glm > 0.5)
glm_acuracia_origin =(glm_confusion_origin[1] + glm_confusion_origin[4])/(glm_confusion_origin[1] + glm_confusion_origin[2] + glm_confusion_origin[3] + glm_confusion_origin[4])
print(glm_acuracia_origin)
glm_confusion_with_pca = table(class_teste, pred_with_pca_glm > 0.5)
glm_acuracia_with_pca =(glm_confusion_with_pca[1] + glm_confusion_with_pca[4])/(glm_confusion_with_pca[1] + glm_confusion_with_pca[2] + glm_confusion_with_pca[3] + glm_confusion_with_pca[4])
print(glm_acuracia_with_pca)
lda_confusion_with_pca = table(pred_with_pca_lda$class, class_teste)
lda_acuracia_with_pca =(lda_confusion_with_pca[1] + lda_confusion_with_pca[4])/(lda_confusion_with_pca[1] + lda_confusion_with_pca[2] + lda_confusion_with_pca[3] + lda_confusion_with_pca[4])
print(lda_confusion_with_pca)
print(lda_acuracia_with_pca)
lda_confusion_with_pca = table(pred_with_pca_lda$class, class_teste)
lda_acuracia_with_pca =(lda_confusion_with_pca[1] + lda_confusion_with_pca[4])/(lda_confusion_with_pca[1] + lda_confusion_with_pca[2] + lda_confusion_with_pca[3] + lda_confusion_with_pca[4])
print(lda_acuracia_with_pca)
lda_confusion_with_pca = table(pred_with_pca_lda$class, class_teste)
lda_acuracia_with_pca =(lda_confusion_with_pca[1] + lda_confusion_with_pca[4])/(lda_confusion_with_pca[1] + lda_confusion_with_pca[2] + lda_confusion_with_pca[3] + lda_confusion_with_pca[4])
print(lda_acuracia_with_pca)
# Sem PCA
lda_confusion_origin = table(pred_origin_lda$class, class_teste)
lda_acuracia_origin =(lda_confusion_origin[1] + lda_confusion_origin[4])/(lda_confusion_origin[1] + lda_confusion_origin[2] + lda_confusion_origin[3] + lda_confusion_origin[4])
print(lda_confusion_origin)
lda_confusion_with_pca = table(pred_with_pca_lda$class, class_teste)
lda_acuracia_with_pca =(lda_confusion_with_pca[1] + lda_confusion_with_pca[4])/(lda_confusion_with_pca[1] + lda_confusion_with_pca[2] + lda_confusion_with_pca[3] + lda_confusion_with_pca[4])
print(lda_acuracia_with_pca)
# Sem PCA
lda_confusion_origin = table(pred_origin_lda$class, class_teste)
lda_acuracia_origin =(lda_confusion_origin[1] + lda_confusion_origin[4])/(lda_confusion_origin[1] + lda_confusion_origin[2] + lda_confusion_origin[3] + lda_confusion_origin[4])
print(lda_acuracia_origin)
data_with_pca_glm = glm(formula = class ~ . , data = data.frame(data_with_pca_treino), family=binomial(link=logit))
pred_with_pca_glm<-predict(data_with_pca_glm,newdata=data.frame(data_with_pca_teste),type="response")
# leitura do arquivo
all_data = read.csv("C:\\Users\\natha\\Desktop\\Unicamp Primeiro Semestre\\Aprendizado\\data1.csv")
# numero de colunas total
number_column = ncol(all_data)
# numero de linhas total
number_row = nrow(all_data)
# selecionando ultima coluna que contem classe
class = all_data[number_column]
# dados originais sem ultima coluna
data_origin = all_data[1: number_column - 1]
# usando a funcao de pca
pca = prcomp(data_origin, scale. = T)
# fazendo a variancia para ver a quantidade de dimensao selecionada
sum_pca = cumsum(pca$sdev^2)/sum(pca$sdev^2)
# porcentagem de variancia que deve ser aceita
variance_ini = 0.8
# verifica qual eh a posicao desta variancia
dimensao = 0;
for (i in 1:(number_column - 1)) {
if (sum_pca[i] >= variance_ini){
dimensao = i
break
}
}
# gerando os dados transformados com as dimensoes da variancia
data_with_pca =pca$x[,1:dimensao]
# numbero de dimensao
total_dimensions = ncol(data_with_pca)
print(total_dimensions)
######### testes ###########
# classes
class_treino = class[c(1:200),1]
class_teste = class[c(201:number_row),1]
# Selecionando treino e teste com dados originais
data_origin_treino = data_origin[c(1:200), 1:number_column - 1]
data_origin_treino["class"] = data.frame(class_treino)
data_origin_teste = data_origin[c(201:number_row), 1:number_column - 1]
data_origin_teste["class"] = data.frame(class_teste)
# Selecionando treino com dados com PCA
data_with_pca_treino = data_with_pca[c(1:200), 1:ncol(data_with_pca)]
data_with_pca_treino = data.frame(data_with_pca_treino)
data_with_pca_treino["class"] = data.frame(class_treino)
data_with_pca_teste = data_with_pca[c(201:number_row), 1: ncol(data_with_pca)]
data_with_pca_teste = data.frame(data_with_pca_teste)
data_with_pca_teste["class"] = data.frame(class_teste)
# aplicando LDA e GLM
install.packages("bestglm")
library(MASS)
### Com PCA ###
# Regressao logistica
data_with_pca_glm = glm(formula = class ~ . , data = data.frame(data_with_pca_treino), family=binomial(link=logit))
pred_with_pca_glm <- predict(data_with_pca_glm,newdata=data.frame(data_with_pca_teste),type="response")
#LDA
data_with_pca_lda = lda( class ~ .,data_with_pca_treino)
pred_with_pca_lda <- predict(data_with_pca_lda,data_with_pca_teste)
### Sem PCA ###
# Regressao logistica
data_origin_glm = glm(formula = class ~ ., data = data.frame(data_origin_treino),family=binomial(link=logit))
pred_origin_glm <- predict(data_origin_glm,newdata=data.frame(data_origin_teste),type="response")
#LDA
data_origin_lda = lda(class ~ .,data_origin_treino)
pred_origin_lda <- predict(data_origin_lda,data_origin_teste)
# Calculo de acuracia
# Questao  numero 2 -Treine uma regressao logistica no conjunto de treino dos dados originais e nos dados transformados.
# Qual a taxa de acerto no conjunto de teste nas 2 condicoes (sem e com PCA)
# Com PCA
glm_confusion_with_pca = table(class_teste, pred_with_pca_glm > 0.5)
glm_acuracia_with_pca =(glm_confusion_with_pca[1] + glm_confusion_with_pca[4])/(glm_confusion_with_pca[1] + glm_confusion_with_pca[2] + glm_confusion_with_pca[3] + glm_confusion_with_pca[4])
print(glm_acuracia_with_pca)
# Sem PCA
glm_confusion_origin = table(class_teste, pred_origin_glm > 0.5)
glm_acuracia_origin =(glm_confusion_origin[1] + glm_confusion_origin[4])/(glm_confusion_origin[1] + glm_confusion_origin[2] + glm_confusion_origin[3] + glm_confusion_origin[4])
print(glm_acuracia_origin)
#accuracy(class_treino,data_origin_glm,threshold=0.5)
# Questao numero 3 - Treine o LDA nos conjuntos de treino com e sem PCA e teste nos respectivos conjuntos de testes. Qual acuracia de cada um?
# Com PCA
lda_confusion_with_pca = table(pred_with_pca_lda$class, class_teste)
lda_acuracia_with_pca =(lda_confusion_with_pca[1] + lda_confusion_with_pca[4])/(lda_confusion_with_pca[1] + lda_confusion_with_pca[2] + lda_confusion_with_pca[3] + lda_confusion_with_pca[4])
print(lda_acuracia_with_pca)
# Sem PCA
lda_confusion_origin = table(pred_origin_lda$class, class_teste)
lda_acuracia_origin =(lda_confusion_origin[1] + lda_confusion_origin[4])/(lda_confusion_origin[1] + lda_confusion_origin[2] + lda_confusion_origin[3] + lda_confusion_origin[4])
print(lda_acuracia_origin)
# leitura do arquivo
all_data = read.csv("C:\\Users\\natha\\Desktop\\Unicamp Primeiro Semestre\\Aprendizado\\data1.csv")
# numero de colunas total
number_column = ncol(all_data)
# numero de linhas total
number_row = nrow(all_data)
# selecionando ultima coluna que contem classe
class = all_data[number_column]
# dados originais sem ultima coluna
data_origin = all_data[1: number_column - 1]
# usando a funcao de pca
pca = prcomp(data_origin, scale. = T)
# fazendo a variancia para ver a quantidade de dimensao selecionada
sum_pca = cumsum(pca$sdev^2)/sum(pca$sdev^2)
# porcentagem de variancia que deve ser aceita
variance_ini = 0.8
# verifica qual eh a posicao desta variancia
dimensao = 0;
for (i in 1:(number_column - 1)) {
if (sum_pca[i] >= variance_ini){
dimensao = i
break
}
}
# gerando os dados transformados com as dimensoes da variancia
data_with_pca =pca$x[,1:dimensao]
# numbero de dimensao
total_dimensions = ncol(data_with_pca)
print(total_dimensions)
######### testes ###########
# classes
class_treino = class[c(1:200),1]
class_teste = class[c(201:number_row),1]
# Selecionando treino e teste com dados originais
data_origin_treino = data_origin[c(1:200), 1:number_column - 1]
data_origin_treino["class"] = data.frame(class_treino)
data_origin_teste = data_origin[c(201:number_row), 1:number_column - 1]
data_origin_teste["class"] = data.frame(class_teste)
# Selecionando treino com dados com PCA
data_with_pca_treino = data_with_pca[c(1:200), 1:ncol(data_with_pca)]
data_with_pca_treino = data.frame(data_with_pca_treino)
data_with_pca_treino["class"] = data.frame(class_treino)
data_with_pca_teste = data_with_pca[c(201:number_row), 1: ncol(data_with_pca)]
data_with_pca_teste = data.frame(data_with_pca_teste)
data_with_pca_teste["class"] = data.frame(class_teste)
# aplicando LDA e GLM
install.packages("bestglm")
library(MASS)
### Com PCA ###
# Regressao logistica
data_with_pca_glm = glm(formula = class ~ . , data = data.frame(data_with_pca_treino), family=binomial(link=logit))
pred_with_pca_glm <- predict(data_with_pca_glm,newdata=data.frame(data_with_pca_teste),type="response")
#LDA
data_with_pca_lda = lda( class ~ .,data_with_pca_treino)
pred_with_pca_lda <- predict(data_with_pca_lda,data_with_pca_teste)
### Sem PCA ###
# Regressao logistica
data_origin_glm = glm(formula = class ~ ., data = data.frame(data_origin_treino),family=binomial(link=logit))
pred_origin_glm <- predict(data_origin_glm,newdata=data.frame(data_origin_teste),type="response")
#LDA
data_origin_lda = lda(class ~ .,data_origin_treino)
pred_origin_lda <- predict(data_origin_lda,data_origin_teste)
# Calculo de acuracia
# Questao  numero 2 -Treine uma regressao logistica no conjunto de treino dos dados originais e nos dados transformados.
# Qual a taxa de acerto no conjunto de teste nas 2 condicoes (sem e com PCA)
# Com PCA
glm_confusion_with_pca = table(class_teste, pred_with_pca_glm > 0.5)
glm_acuracia_with_pca =(glm_confusion_with_pca[1] + glm_confusion_with_pca[4])/(glm_confusion_with_pca[1] + glm_confusion_with_pca[2] + glm_confusion_with_pca[3] + glm_confusion_with_pca[4])
print(glm_acuracia_with_pca)
# Sem PCA
glm_confusion_origin = table(class_teste, pred_origin_glm > 0.5)
glm_acuracia_origin =(glm_confusion_origin[1] + glm_confusion_origin[4])/(glm_confusion_origin[1] + glm_confusion_origin[2] + glm_confusion_origin[3] + glm_confusion_origin[4])
print(glm_acuracia_origin)
#accuracy(class_treino,data_origin_glm,threshold=0.5)
# Questao numero 3 - Treine o LDA nos conjuntos de treino com e sem PCA e teste nos respectivos conjuntos de testes. Qual acuracia de cada um?
# Com PCA
lda_confusion_with_pca = table(pred_with_pca_lda$class, class_teste)
lda_acuracia_with_pca =(lda_confusion_with_pca[1] + lda_confusion_with_pca[4])/(lda_confusion_with_pca[1] + lda_confusion_with_pca[2] + lda_confusion_with_pca[3] + lda_confusion_with_pca[4])
print(lda_acuracia_with_pca)
# Sem PCA
lda_confusion_origin = table(pred_origin_lda$class, class_teste)
lda_acuracia_origin =(lda_confusion_origin[1] + lda_confusion_origin[4])/(lda_confusion_origin[1] + lda_confusion_origin[2] + lda_confusion_origin[3] + lda_confusion_origin[4])
print(lda_acuracia_origin)
